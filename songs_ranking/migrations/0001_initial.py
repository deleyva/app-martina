# Generated by Django 5.0.11 on 2025-05-01 16:36

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spotify_id', models.CharField(max_length=100, unique=True, verbose_name='Spotify ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('artist', models.CharField(max_length=255, verbose_name='Artist')),
                ('album', models.CharField(blank=True, max_length=255, verbose_name='Album')),
                ('preview_url', models.URLField(blank=True, max_length=500, null=True, verbose_name='Preview URL')),
                ('image_url', models.URLField(blank=True, max_length=500, null=True, verbose_name='Image URL')),
            ],
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('proposal_phase_start', models.DateTimeField(verbose_name='Proposal phase start')),
                ('proposal_phase_end', models.DateTimeField(verbose_name='Proposal phase end')),
                ('voting_phase_start', models.DateTimeField(verbose_name='Voting phase start')),
                ('voting_phase_end', models.DateTimeField(verbose_name='Voting phase end')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_surveys', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
            ],
        ),
        migrations.CreateModel(
            name='SongProposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='song_proposals', to=settings.AUTH_USER_MODEL, verbose_name='Participant')),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposals', to='songs_ranking.song', verbose_name='Song')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposals', to='songs_ranking.survey', verbose_name='Survey')),
            ],
            options={
                'unique_together': {('survey', 'song', 'participant')},
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='songs_ranking.song', verbose_name='Song')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='songs_ranking.survey', verbose_name='Survey')),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='song_votes', to=settings.AUTH_USER_MODEL, verbose_name='Voter')),
            ],
            options={
                'unique_together': {('survey', 'song', 'voter')},
            },
        ),
    ]
